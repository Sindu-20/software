# -*- coding: utf-8 -*-
"""app1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Io66QYg1HT8Y16Shy8MDmOp-BJfEC1Lg
"""

# -*- coding: utf-8 -*-
"""login.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qwHCi05OTWn7U65pySE12AAPXRUDtp7X
"""

from IPython.display import display, HTML

html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Payroll System</title>
<style>
    body {
        font-family: "Segoe UI", sans-serif;
        /* subtle background gradient */
        background: linear-gradient(135deg, #f2f2f2, #e6e6e6);
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }
    .container {
        background-color: white; /* form background */
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0px 4px 20px rgba(0,0,0,0.1);
        width: 350px;
        text-align: center;
    }
    h2 {
        margin-bottom: 20px;
        color: #2d3436;
    }
    input[type="text"], input[type="password"] {
        width: 90%;
        padding: 10px;
        margin: 8px 0;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 14px;
    }
    .captcha-box {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 15px 0;
    }
    .captcha {
        background-color: transparent; /* transparent background */
        color: red; /* captcha text in red */
        padding: 10px 20px;
        font-weight: bold;
        font-size: 18px;
        border-radius: 6px;
        letter-spacing: 3px;
    }
    button {
        background-color: #0984e3;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
        width: 100%;
        margin-top: 10px;
        font-size: 15px;
    }
    button:hover {
        background-color: #74b9ff;
    }
    .error {
        color: red;
        font-size: 13px;
        margin-top: 10px;
    }
    .toggle-btn {
        margin-top: 10px;
        background: none;
        color: #0984e3;
        text-decoration: underline;
        cursor: pointer;
        font-size: 14px;
    }
</style>
</head>
<body>

<div class="container">
    <h2 id="formTitle">Employee Payroll Login</h2>
    <form id="authForm">
        <input type="text" id="username" placeholder="Username" required><br>
        <input type="password" id="password" placeholder="Password" required><br>

        <div class="captcha-box">
            <div id="captcha" class="captcha"></div>
            <button type="button" onclick="generateCaptcha()">↻</button>
        </div>

        <input type="text" id="captchaInput" placeholder="Enter CAPTCHA" required><br>
        <div id="errorMsg" class="error"></div>

        <button type="submit" id="submitBtn">Login</button>
    </form>
    <button class="toggle-btn" id="toggleForm">Don't have an account? Register</button>
</div>

<script>
let generatedCaptcha = "";
let isLogin = true; // toggle between login and registration

function generateCaptcha() {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    generatedCaptcha = "";
    for (let i = 0; i < 6; i++) {
        generatedCaptcha += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    document.getElementById("captcha").innerText = generatedCaptcha;
}

// Toggle between login and registration
document.getElementById("toggleForm").addEventListener("click", () => {
    isLogin = !isLogin;
    document.getElementById("formTitle").innerText = isLogin ? "Employee Payroll Login" : "Register New Account";
    document.getElementById("submitBtn").innerText = isLogin ? "Login" : "Register";
    document.getElementById("toggleForm").innerText = isLogin ? "Don't have an account? Register" : "Already have an account? Login";
    document.getElementById("errorMsg").innerText = "";
});

// Handle form submit
document.getElementById("authForm").addEventListener("submit", function(event) {
    event.preventDefault();
    const username = document.getElementById("username").value.trim();
    const password = document.getElementById("password").value.trim();
    const inputCaptcha = document.getElementById("captchaInput").value.trim();
    const errorMsg = document.getElementById("errorMsg");

    if (inputCaptcha !== generatedCaptcha) {
        errorMsg.innerText = "❌ CAPTCHA is incorrect!";
        generateCaptcha();
        return;
    }

    if (!username || !password) {
        errorMsg.innerText = "⚠ Please enter username and password!";
        return;
    }

    if (isLogin) {
        const storedPassword = localStorage.getItem(username);
        if (storedPassword && storedPassword === password) {
            errorMsg.innerText = "";
            alert("✅ Login successful!");
            window.location.href = "https://payrollwebsite-gcbjtfwhyjybtctwh5hpyt.streamlit.app/";
        } else {
            errorMsg.innerText = "❌ Invalid username or password!";
        }
    } else {
        if (localStorage.getItem(username)) {
            errorMsg.innerText = "⚠ Username already exists!";
        } else {
            localStorage.setItem(username, password);
            errorMsg.style.color = "green";
            errorMsg.innerText = "✅ Registration successful! You can login now.";
            setTimeout(() => {
                isLogin = true;
                document.getElementById("formTitle").innerText = "Employee Payroll Login";
                document.getElementById("submitBtn").innerText = "Login";
                document.getElementById("toggleForm").innerText = "Don't have an account? Register";
                errorMsg.innerText = "";
            }, 2000);
        }
    }

    document.getElementById("captchaInput").value = "";
    generateCaptcha();
});

// Generate captcha on page load
window.onload = generateCaptcha;
</script>

</body>
</html>
"""

display(HTML(html_content))

# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12q73miCwhyk2LgdjUq_Bo5fiyzMiLu0l
"""

import streamlit as st
import sqlite3
from datetime import datetime

# Connect to SQLite
conn = sqlite3.connect("payroll.db", check_same_thread=False)
cursor = conn.cursor()

# Create Tables
cursor.execute("""
CREATE TABLE IF NOT EXISTS employees (
    emp_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    designation TEXT,
    salary_per_day REAL
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS attendance (
    emp_id INTEGER,
    date TEXT,
    status TEXT CHECK(status IN ('Present', 'Absent')),
    FOREIGN KEY(emp_id) REFERENCES employees(emp_id)
)
""")
conn.commit()

# UI: Title
st.title("💼 Employee Payroll System")

#  UPDATED: Menu includes Delete option
menu = [
    "Add Employee",
    "Mark Attendance",
    "View Employees",
    "Generate Salary Slip",
    "Delete Employee"
]
choice = st.sidebar.selectbox("Menu", menu)

# Add Employee
if choice == "Add Employee":
    st.subheader("➕ Add New Employee")
    name = st.text_input("Name")
    designation = st.text_input("Designation")
    salary = st.number_input("Salary per Day", min_value=0.0, format="%.2f")
    if st.button("Add Employee"):
        cursor.execute("INSERT INTO employees (name, designation, salary_per_day) VALUES (?, ?, ?)",
                       (name, designation, salary))
        conn.commit()
        st.success(f"Employee {name} added.")

# Mark Attendance
elif choice == "Mark Attendance":
    st.subheader("📅 Mark Attendance")
    cursor.execute("SELECT emp_id, name FROM employees")
    data = cursor.fetchall()
    emp_dict = {f"{name} (ID: {emp_id})": emp_id for emp_id, name in data}
    if emp_dict:
        emp_name = st.selectbox("Select Employee", list(emp_dict.keys()))
        status = st.radio("Status", ["Present", "Absent"])
        date = st.date_input("Date", datetime.today()).strftime("%Y-%m-%d")

        if st.button("Submit Attendance"):
            emp_id = emp_dict[emp_name]
            cursor.execute("INSERT INTO attendance (emp_id, date, status) VALUES (?, ?, ?)",
                        (emp_id, date, status))
            conn.commit()
            st.success(f"Attendance for {emp_name} marked as {status}.")
    else:
        st.warning("No employees found. Please add employees first.")

# View Employees
elif choice == "View Employees":
    st.subheader("👥 Employee List")
    cursor.execute("SELECT * FROM employees")
    rows = cursor.fetchall()
    if rows:
        st.table(rows)
    else:
        st.info("No employees added yet.")

# Generate Salary Slip
elif choice == "Generate Salary Slip":
    st.subheader("🧾 Generate Salary Slip")
    emp_id = st.number_input("Enter Employee ID", min_value=1, step=1)
    month = st.selectbox("Select Month", [f"{i:02}" for i in range(1, 13)])

    if st.button("Generate"):
        cursor.execute("SELECT name, salary_per_day FROM employees WHERE emp_id = ?", (emp_id,))
        emp = cursor.fetchone()
        if emp:
            name, salary_per_day = emp
            cursor.execute("""
                SELECT COUNT(*) FROM attendance
                WHERE emp_id = ? AND strftime('%m', date) = ? AND status = 'Present'
            """, (emp_id, month))
            days_present = cursor.fetchone()[0]
            net_salary = days_present * salary_per_day

            st.markdown("### 💰 Salary Slip")
            st.write(f"**Employee ID:** {emp_id}")
            st.write(f"**Name:** {name}")
            st.write(f"**Month:** {month}")
            st.write(f"**Days Present:** {days_present}")
            st.write(f"**Salary/Day:** ₹{salary_per_day}")
            st.write(f"**Net Salary:** ₹{net_salary}")
        else:
            st.error("Employee not found.")

#  Delete Employee
elif choice == "Delete Employee":
    st.subheader("🗑️ Delete Employee Record")

    cursor.execute("SELECT emp_id, name FROM employees")
    employees = cursor.fetchall()

    if not employees:
        st.warning("No employees found to delete.")
    else:
        emp_dict = {f"{name} (ID: {emp_id})": emp_id for emp_id, name in employees}
        selected_emp = st.selectbox("Select Employee to Delete", list(emp_dict.keys()))
        emp_id_to_delete = emp_dict[selected_emp]

        confirm = st.checkbox("I confirm I want to delete this employee and their attendance data.")
        if st.button("Delete Employee") and confirm:
            cursor.execute("DELETE FROM attendance WHERE emp_id = ?", (emp_id_to_delete,))
            cursor.execute("DELETE FROM employees WHERE emp_id = ?", (emp_id_to_delete,))
            conn.commit()
            st.success(f"Employee '{selected_emp}' and all related attendance records deleted.")

!pip install streamlit